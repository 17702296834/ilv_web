git
网站编程协议

########################################################################
# 1、安装
########################################################################
    #*******************************************************************
    # 1.1 Ubuntu 18.04 LSD
    #*******************************************************************
    >>sudo apt-get update
    >>sudo apt-get install git
    
########################################################################
# 2、创建仓库
########################################################################
~$ cd ~/
~$ git init  

########################################################################
# 3、克隆代码
########################################################################
3.1 克隆本地仓库
~$ git clone /path/to/repository

3.2 克隆远程仓库
~$ git clone https://github.com/ilvbobing/ilv_web

3.3 进入工作目录
~$ cd ~/ilv_web

########################################################################
# 4、工作流
########################################################################
1 工作目录：working dir 实际持有文件
2 缓 冲 区：index(stage) 临时保存改动内容
3 HEAD： 最后一次提交的结果

########################################################################
# 5、添加与提交 由working到index
########################################################################
如果你需要把改动添加到缓存区，使用如下命令：
1. 添加指定文件
~/ilv_web$ git add <filename>
2. 添加所有文件
~/ilv_web$ git add *
3. ?
~/ilv_web$ git add .

由缓冲区到HEAD使用如下命令：
>>git commit -m "代码提交信息"

########################################################################
# 提交改动 由HEAD到远端仓库
########################################################################
你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：
~/ilv_web$ git push origin master
可以把 master 换成你想要推送的任何分支。

如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：
~/ilv_web$ git remote add origin <server>
如此你就能够将你的改动推送到所添加的服务器上去了。

########################################################################
# 提交改动 由HEAD到远端仓库
########################################################################
分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。 

########################################################################
# 分支
########################################################################
创建一个叫做“feature_x”的分支，并切换过去：
git checkout -b feature_x
切换回主分支：
git checkout master
再把新建的分支删掉：
git branch -d feature_x
除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：
git push origin <branch>

########################################################################
# 更新与合并
########################################################################
要更新你的本地仓库至最新改动，执行：
git pull
以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。
要合并其他分支到你的当前分支（例如 master），执行：
git merge <branch>
两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功：
git add <filename>
在合并改动之前，也可以使用如下命令查看：
git diff <source_branch> <target_branch>

########################################################################
# 标签
########################################################################
在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：
git tag 1.0.0 1b2e1d63ff
1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：
git log
你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。 

########################################################################
# 替换本地改动
########################################################################
 假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：
git checkout -- <filename>
此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。

假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：
git fetch origin
git reset --hard origin/master 

########################################################################
# 有用的贴士
########################################################################
内建的图形化 git：
gitk
彩色的 git 输出：
git config color.ui true
显示历史记录时，只显示一行注释信息：
git config format.pretty oneline
交互地添加文件至缓存区：
git add -i

########################################################################
# 执行登陆用户名和密码命令
########################################################################
git config --global user.email "you@example.com"
git config --global user.name "Your Name"



########################################################################
# 链接与资源
########################################################################
图形化界面

    GitX (L) (OSX, open source)
    Tower (OSX)
    Source Tree (OSX, free)
    GitHub for Mac (OSX, free)
    GitBox (OSX)

指南与手册

    Git 社区参考书
    专业 Git
    如 git 思考
    GitHub 帮助
    图形化的 Git 指南一则

########################################################################
# QGit
########################################################################

QGit是一款由Marco Costalba用Qt和C++写的开源的图形界面 Git 客户端。它是一款可以在图形界面环境下更好地提供浏览版本历史、查看提交记录和文件补丁的客户端。它利用git命令行来执行并显示输出。它有一些常规的功能像浏览版本历史、比较、文件历史、文件标注、归档树。我们可以格式化并用选中的提交应用补丁，在两个或多个实例之间拖拽并提交等等。它允许我们用它内置的生成器来创建自定义的按钮去执行特定的命令。


这里有简单的几步在Ubuntu 14.04 LTS "Trusty"中编译并安装QGit客户端。


1.安装 QT4 库

首先在ubuntu中运行QGit需要先安装QT4库。由于apt是ubuntu默认的包管理器，同时qt4也在官方的仓库中，因此我们直接用下面的apt-get命令来安装qt4。

$ sudo apt-get install qt4-default


2.下载QGit压缩包

安装完Qt4之后，我们要安装git，这样我们才能在QGit中克隆git仓库。运行下面的apt-get命令。

$ sudo apt-get install git

现在，我们要使用下面的git命令来克隆QGit客户端的仓库。

$ git clone git://repo.or.cz/qgit4/redivivus.git
Cloning into 'redivivus'...
remote: Counting objects: 7128, done.
remote: Compressing objects: 100% (2671/2671), done.
remote: Total 7128 (delta 5464), reused 5711 (delta 4438)
Receiving objects: 100% (7128/7128), 2.39 MiB | 470.00 KiB/s, done.
Resolving deltas: 100% (5464/5464), done.
Checking connectivity... done.


3.编译 QGit

克隆之后，我们现在进入redivivus的目录，并创建我们编译需要的makefile文件。进入目录，运行下面的命令。

$ cd redivivus

接下来，我们运行下面的命令从qmake项目文件（qgit.pro）来生成新的Makefile。

$ qmake qgit.pro

生成Makefile之后，我们现在终于可以编译qgit的源代码并生成二进制。首先我们要安装make和g++包用于编译，因为这是一个用C++写的程序。

$ sudo apt-get install make g++

现在，我们要用make命令来编译代码了。

$ make


4.安装 QGit

成功编译QGit的源码之后，我们就要在Ubuntu 14.04中安装它了，这样就可以在系统中执行它。因此我们将运行下面的命令。

$ sudo make install
cd src/ && make -f Makefile install
make[1]: Entering directory `/home/arun/redivivus/src'
make -f Makefile.Release install
make[2]: Entering directory `/home/arun/redivivus/src'
install -m 755 -p "../bin/qgit" "/usr/lib/x86_64-linux-gnu/qt4/bin/qgit"
strip "/usr/lib/x86_64-linux-gnu/qt4/bin/qgit"
make[2]: Leaving directory `/home/arun/redivivus/src'
make[1]: Leaving directory `/home/arun/redivivus/src'

接下来，我们需要从bin目录下复制qgit的二进制文件到/usr/bin/，这样我们就可以全局运行它了。

$ sudo cp bin/qgit /usr/bin/


5.创建桌面文件

既然我们已经在ubuntu中成功安装了qgit，我们来创建一个桌面文件，这样QGit就可以在我们桌面环境中的菜单或者启动器中找到了。要做到这点，我们要在/usr/share/applications/创建一个新文件叫qgit.desktop。

$ sudo nano /usr/share/applications/qgit.desktop

接下来复制下面的行到文件中。

[Desktop Entry]
Name=qgit
GenericName=git 图形界面 viewer
Exec=qgit
Icon=qgit
Type=Application
Comment=git 图形界面 viewer
Terminal=false
MimeType=inode/directory;
Categories=Qt;Development;RevisionControl;

完成之后，保存并退出。


6.运行 QGit 客户端

QGit安装完成之后，我们现在就可以从任何启动器或者程序菜单中启动它了。

总结

QGit是一个很棒的基于QT的git客户端。它可以在Linux、MAC OSX和 Microsoft Windows所有这三个平台中运行。它帮助我们很容易地浏览历史、版本、分支等等git仓库提供的信息。它减少了使用命令行的方式去执行诸如浏览版本、历史、比较功能的需求，并用图形化的方式来简化了这些任务。最新的qgit版本也在默认仓库中，你可以使用 apt-get install qgit 命令来安装。因此，QGit用它简单的图形界面使得我们的工作更加简单和快速。









